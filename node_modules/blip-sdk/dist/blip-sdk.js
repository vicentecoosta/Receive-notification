(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lime-js"), require("bluebird"));
	else if(typeof define === 'function' && define.amd)
		define(["Lime", "Promise"], factory);
	else if(typeof exports === 'object')
		exports["BlipSdk"] = factory(require("lime-js"), require("bluebird"));
	else
		root["BlipSdk"] = factory(root["Lime"], root["Promise"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Client = __webpack_require__(1);
	
	Object.defineProperty(exports, 'Client', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Client).default;
	  }
	});
	
	var _ClientBuilder = __webpack_require__(14);
	
	Object.defineProperty(exports, 'ClientBuilder', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_ClientBuilder).default;
	  }
	});
	
	var _Application = __webpack_require__(3);
	
	Object.defineProperty(exports, 'Application', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Application).default;
	  }
	});
	
	var _Extensions = __webpack_require__(15);
	
	Object.defineProperty(exports, 'Extensions', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Extensions).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _limeJs = __webpack_require__(2);
	
	var _limeJs2 = _interopRequireDefault(_limeJs);
	
	var _Application = __webpack_require__(3);
	
	var _Application2 = _interopRequireDefault(_Application);
	
	var _bluebird = __webpack_require__(4);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	var _ArtificialIntelligence = __webpack_require__(5);
	
	var _ArtificialIntelligence2 = _interopRequireDefault(_ArtificialIntelligence);
	
	var _Media = __webpack_require__(9);
	
	var _Media2 = _interopRequireDefault(_Media);
	
	var _Chat = __webpack_require__(11);
	
	var _Chat2 = _interopRequireDefault(_Chat);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var identity = function identity(x) {
	    return x;
	};
	var MAX_CONNECTION_TRY_COUNT = 10;
	
	var Client = function () {
	    // Client :: String -> Transport? -> Client
	    function Client(uri, transportFactory, application) {
	        _classCallCheck(this, Client);
	
	        var defaultApplication = new _Application2.default();
	
	        this._application = _extends({}, defaultApplication, application);
	
	        this._messageReceivers = [];
	        this._notificationReceivers = [];
	        this._commandReceivers = [];
	        this._commandResolves = {};
	        this.sessionPromise = new _bluebird2.default(function () {});
	        this.sessionFinishedHandlers = [];
	        this.sessionFailedHandlers = [];
	
	        this._listening = false;
	        this._closing = false;
	        this._uri = uri;
	        this._connectionTryCount = 0;
	
	        this._transportFactory = typeof transportFactory === 'function' ? transportFactory : function () {
	            return transportFactory;
	        };
	        this._transport = this._transportFactory();
	
	        this._initializeClientChannel();
	
	        this._extensions = {};
	    }
	
	    // connectWithGuest :: String -> Promise Session
	
	
	    _createClass(Client, [{
	        key: 'connectWithGuest',
	        value: function connectWithGuest(identifier) {
	            if (!identifier) throw new Error('The identifier is required');
	            this._application.identifier = identifier;
	            this._application.authentication = new _limeJs2.default.GuestAuthentication();
	            return this.connect();
	        }
	
	        // connectWithPassword :: String -> String -> Promise Session
	
	    }, {
	        key: 'connectWithPassword',
	        value: function connectWithPassword(identifier, password, presence) {
	            if (!identifier) throw new Error('The identifier is required');
	            if (!password) throw new Error('The password is required');
	            this._application.identifier = identifier;
	            this._application.authentication = new _limeJs2.default.PlainAuthentication();
	            this._application.authentication.password = password;
	            if (presence) this._application.presence = presence;
	            return this.connect();
	        }
	
	        // connectWithKey :: String -> String -> Promise Session
	
	    }, {
	        key: 'connectWithKey',
	        value: function connectWithKey(identifier, key, presence) {
	            if (!identifier) throw new Error('The identifier is required');
	            if (!key) throw new Error('The key is required');
	            this._application.identifier = identifier;
	            this._application.authentication = new _limeJs2.default.KeyAuthentication();
	            this._application.authentication.key = key;
	            if (presence) this._application.presence = presence;
	            return this.connect();
	        }
	    }, {
	        key: 'connect',
	        value: function connect() {
	            var _this = this;
	
	            if (this._connectionTryCount >= MAX_CONNECTION_TRY_COUNT) {
	                throw new Error('Could not connect: Max connection try count of ' + MAX_CONNECTION_TRY_COUNT + ' reached. Please check you network and refresh the page.');
	            }
	
	            this._connectionTryCount++;
	            this._closing = false;
	            return this._transport.open(this.uri).then(function () {
	                return _this._clientChannel.establishSession(_this._application.compression, _this._application.encryption, _this._application.identifier + '@' + _this._application.domain, _this._application.authentication, _this._application.instance);
	            }).then(function (session) {
	                return _this._sendPresenceCommand().then(function () {
	                    return session;
	                });
	            }).then(function (session) {
	                return _this._sendReceiptsCommand().then(function () {
	                    return session;
	                });
	            }).then(function (session) {
	                _this.listening = true;
	                _this._connectionTryCount = 0;
	                return session;
	            });
	        }
	    }, {
	        key: '_initializeClientChannel',
	        value: function _initializeClientChannel() {
	            var _this2 = this;
	
	            this._transport.onClose = function () {
	                _this2.listening = false;
	                if (!_this2._closing) {
	                    // Use an exponential backoff for the timeout
	                    var timeout = 100 * Math.pow(2, _this2._connectionTryCount);
	
	                    // try to reconnect after the timeout
	                    setTimeout(function () {
	                        if (!_this2._closing) {
	                            _this2._transport = _this2._transportFactory();
	                            _this2._initializeClientChannel();
	                            _this2.connect();
	                        }
	                    }, timeout);
	                }
	            };
	
	            this._clientChannel = new _limeJs2.default.ClientChannel(this._transport, true, false);
	            this._clientChannel.onMessage = function (message) {
	                var shouldNotify = message.id && (!message.to || _this2._clientChannel.localNode.substring(0, message.to.length).toLowerCase() === message.to.toLowerCase());
	
	                if (shouldNotify) {
	                    _this2.sendNotification({
	                        id: message.id,
	                        to: message.pp || message.from,
	                        event: _limeJs2.default.NotificationEvent.RECEIVED,
	                        metadata: {
	                            '#message.to': message.to,
	                            '#message.uniqueId': message.metadata ? message.metadata['#uniqueId'] || null : null
	
	                        }
	                    });
	                }
	
	                _this2._loop(0, shouldNotify, message);
	            };
	
	            this._clientChannel.onNotification = function (notification) {
	                return _this2._notificationReceivers.forEach(function (receiver) {
	                    return receiver.predicate(notification) && receiver.callback(notification);
	                });
	            };
	
	            this._clientChannel.onCommand = function (c) {
	                (_this2._commandResolves[c.id] || identity)(c);
	                _this2._commandReceivers.forEach(function (receiver) {
	                    return receiver.predicate(c) && receiver.callback(c);
	                });
	            };
	
	            this.sessionPromise = new _bluebird2.default(function (resolve, reject) {
	                _this2._clientChannel.onSessionFinished = function (s) {
	                    resolve(s);
	                    _this2.sessionFinishedHandlers.forEach(function (handler) {
	                        return handler(s);
	                    });
	                };
	                _this2._clientChannel.onSessionFailed = function (s) {
	                    reject(s);
	                    _this2.sessionFailedHandlers.forEach(function (handler) {
	                        return handler(s);
	                    });
	                };
	            });
	        }
	    }, {
	        key: '_loop',
	        value: function _loop(i, shouldNotify, message) {
	            var _this3 = this;
	
	            try {
	                if (i < this._messageReceivers.length) {
	                    if (this._messageReceivers[i].predicate(message)) {
	                        return _bluebird2.default.resolve(this._messageReceivers[i].callback(message)).then(function (result) {
	                            return new _bluebird2.default(function (resolve, reject) {
	                                if (result === false) {
	                                    reject();
	                                }
	                                resolve();
	                            });
	                        }).then(function () {
	                            return _this3._loop(i + 1, shouldNotify, message);
	                        });
	                    } else {
	                        this._loop(i + 1, shouldNotify, message);
	                    }
	                } else {
	                    this._notify(shouldNotify, message, null);
	                }
	            } catch (e) {
	                this._notify(shouldNotify, message, e);
	            }
	        }
	    }, {
	        key: '_notify',
	        value: function _notify(shouldNotify, message, e) {
	            if (shouldNotify && e) {
	                this.sendNotification({
	                    id: message.id,
	                    to: message.from,
	                    event: _limeJs2.default.NotificationEvent.FAILED,
	                    reason: {
	                        code: 101,
	                        description: e.message
	                    }
	                });
	            }
	
	            if (shouldNotify && this._application.notifyConsumed) {
	                this.sendNotification({
	                    id: message.id,
	                    to: message.pp || message.from,
	                    event: _limeJs2.default.NotificationEvent.CONSUMED,
	                    metadata: {
	                        '#message.to': message.to,
	                        '#message.uniqueId': message.metadata ? message.metadata['#uniqueId'] || null : null
	                    }
	                });
	            }
	        }
	    }, {
	        key: '_sendPresenceCommand',
	        value: function _sendPresenceCommand() {
	            if (this._application.authentication instanceof _limeJs2.default.GuestAuthentication) {
	                return _bluebird2.default.resolve();
	            }
	            return this.sendCommand({
	                id: _limeJs2.default.Guid(),
	                method: _limeJs2.default.CommandMethod.SET,
	                uri: '/presence',
	                type: 'application/vnd.lime.presence+json',
	                resource: this._application.presence
	            });
	        }
	    }, {
	        key: '_sendReceiptsCommand',
	        value: function _sendReceiptsCommand() {
	            if (this._application.authentication instanceof _limeJs2.default.GuestAuthentication) {
	                return _bluebird2.default.resolve();
	            }
	            return this.sendCommand({
	                id: _limeJs2.default.Guid(),
	                method: _limeJs2.default.CommandMethod.SET,
	                uri: '/receipt',
	                type: 'application/vnd.lime.receipt+json',
	                resource: {
	                    events: ['failed', 'accepted', 'dispatched', 'received', 'consumed']
	                }
	            });
	        }
	    }, {
	        key: '_getExtension',
	        value: function _getExtension(type) {
	            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            var extension = this._extensions[type];
	            if (!extension) {
	                extension = new type(this, to);
	                this._extensions[type] = extension;
	            }
	            return extension;
	        }
	
	        // close :: Promise ()
	
	    }, {
	        key: 'close',
	        value: function close() {
	            this._closing = true;
	
	            if (this._clientChannel.state === _limeJs2.default.SessionState.ESTABLISHED) {
	                return this._clientChannel.sendFinishingSession();
	            }
	
	            return _bluebird2.default.resolve(this.sessionPromise.then(function (s) {
	                return s;
	            }).catch(function (s) {
	                return _bluebird2.default.resolve(s);
	            }));
	        }
	
	        // sendMessage :: Message -> ()
	
	    }, {
	        key: 'sendMessage',
	        value: function sendMessage(message) {
	            this._clientChannel.sendMessage(message);
	        }
	
	        // sendNotification :: Notification -> ()
	
	    }, {
	        key: 'sendNotification',
	        value: function sendNotification(notification) {
	            this._clientChannel.sendNotification(notification);
	        }
	
	        // sendCommand :: Command -> Number -> Promise Command
	
	    }, {
	        key: 'sendCommand',
	        value: function sendCommand(command) {
	            var _this4 = this;
	
	            var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._application.commandTimeout;
	
	            var commandPromise = _bluebird2.default.race([new _bluebird2.default(function (resolve, reject) {
	                _this4._commandResolves[command.id] = function (c) {
	                    if (!c.status) return;
	
	                    if (c.status === _limeJs2.default.CommandStatus.SUCCESS) {
	                        resolve(c);
	                    } else {
	                        var cmd = JSON.stringify(c);
	                        reject(new ClientError(cmd));
	                    }
	
	                    delete _this4._commandResolves[command.id];
	                };
	            }), new _bluebird2.default(function (_, reject) {
	                setTimeout(function () {
	                    if (!_this4._commandResolves[command.id]) return;
	
	                    delete _this4._commandResolves[command.id];
	                    command.status = 'failure';
	                    command.timeout = true;
	
	                    var cmd = JSON.stringify(command);
	                    reject(new ClientError(cmd));
	                }, timeout);
	            })]);
	
	            this._clientChannel.sendCommand(command);
	            return commandPromise;
	        }
	
	        // processCommand :: Command -> Number -> Promise Command
	
	    }, {
	        key: 'processCommand',
	        value: function processCommand(command) {
	            var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._application.commandTimeout;
	
	            return this._clientChannel.processCommand(command, timeout);
	        }
	
	        // addMessageReceiver :: String -> (Message -> ()) -> Function
	
	    }, {
	        key: 'addMessageReceiver',
	        value: function addMessageReceiver(predicate, callback) {
	            var _this5 = this;
	
	            predicate = this.processPredicate(predicate);
	
	            this._messageReceivers.push({ predicate: predicate, callback: callback });
	            return function () {
	                return _this5._messageReceivers = _this5._messageReceivers.filter(_this5.filterReceiver(predicate, callback));
	            };
	        }
	    }, {
	        key: 'clearMessageReceivers',
	        value: function clearMessageReceivers() {
	            this._messageReceivers = [];
	        }
	
	        // addCommandReceiver :: Function -> (Command -> ()) -> Function
	
	    }, {
	        key: 'addCommandReceiver',
	        value: function addCommandReceiver(predicate, callback) {
	            var _this6 = this;
	
	            predicate = this.processPredicate(predicate);
	
	            this._commandReceivers.push({ predicate: predicate, callback: callback });
	            return function () {
	                return _this6._commandReceivers = _this6._commandReceivers.filter(_this6.filterReceiver(predicate, callback));
	            };
	        }
	    }, {
	        key: 'clearCommandReceivers',
	        value: function clearCommandReceivers() {
	            this._commandReceivers = [];
	        }
	
	        // addNotificationReceiver :: String -> (Notification -> ()) -> Function
	
	    }, {
	        key: 'addNotificationReceiver',
	        value: function addNotificationReceiver(predicate, callback) {
	            var _this7 = this;
	
	            predicate = this.processPredicate(predicate);
	
	            this._notificationReceivers.push({ predicate: predicate, callback: callback });
	            return function () {
	                return _this7._notificationReceivers = _this7._notificationReceivers.filter(_this7.filterReceiver(predicate, callback));
	            };
	        }
	    }, {
	        key: 'clearNotificationReceivers',
	        value: function clearNotificationReceivers() {
	            this._notificationReceivers = [];
	        }
	    }, {
	        key: 'addSessionFinishedHandlers',
	        value: function addSessionFinishedHandlers(callback) {
	            var _this8 = this;
	
	            this.sessionFinishedHandlers.push(callback);
	            return function () {
	                return _this8.sessionFinishedHandlers = _this8.sessionFinishedHandlers.filter(_this8.filterReceiver(null, callback));
	            };
	        }
	    }, {
	        key: 'clearSessionFinishedHandlers',
	        value: function clearSessionFinishedHandlers() {
	            this.sessionFinishedHandlers = [];
	        }
	    }, {
	        key: 'addSessionFailedHandlers',
	        value: function addSessionFailedHandlers(callback) {
	            var _this9 = this;
	
	            this.sessionFailedHandlers.push(callback);
	            return function () {
	                return _this9.sessionFailedHandlers = _this9.sessionFailedHandlers.filter(_this9.filterReceiver(null, callback));
	            };
	        }
	    }, {
	        key: 'clearSessionFailedHandlers',
	        value: function clearSessionFailedHandlers() {
	            this.sessionFailedHandlers = [];
	        }
	    }, {
	        key: 'processPredicate',
	        value: function processPredicate(predicate) {
	            if (typeof predicate !== 'function') {
	                if (predicate === true || !predicate) {
	                    predicate = function predicate() {
	                        return true;
	                    };
	                } else {
	                    var value = predicate;
	                    predicate = function predicate(envelope) {
	                        return envelope.event === value || envelope.type === value;
	                    };
	                }
	            }
	
	            return predicate;
	        }
	    }, {
	        key: 'filterReceiver',
	        value: function filterReceiver(predicate, callback) {
	            return function (r) {
	                return r.predicate !== predicate && r.callback !== callback;
	            };
	        }
	    }, {
	        key: 'listening',
	        get: function get() {
	            return this._listening;
	        },
	        set: function set(listening) {
	            this._listening = listening;
	            if (this.onListeningChanged) {
	                this.onListeningChanged(listening, this);
	            }
	        }
	    }, {
	        key: 'uri',
	        get: function get() {
	            return this._uri;
	        }
	    }, {
	        key: 'ArtificialIntelligence',
	        get: function get() {
	            return this._getExtension(_ArtificialIntelligence2.default, this._application.domain);
	        }
	    }, {
	        key: 'Media',
	        get: function get() {
	            return this._getExtension(_Media2.default, this._application.domain);
	        }
	    }, {
	        key: 'Chat',
	        get: function get() {
	            return this._getExtension(_Chat2.default);
	        }
	    }]);
	
	    return Client;
	}();
	
	exports.default = Client;
	
	var ClientError = function (_Error) {
	    _inherits(ClientError, _Error);
	
	    function ClientError(message) {
	        _classCallCheck(this, ClientError);
	
	        var _this10 = _possibleConstructorReturn(this, (ClientError.__proto__ || Object.getPrototypeOf(ClientError)).call(this));
	
	        _this10.name = '';
	        _this10.message = message;
	        return _this10;
	    }
	
	    return ClientError;
	}(Error);
	
	module.exports = exports['default'];

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _limeJs = __webpack_require__(2);
	
	var _limeJs2 = _interopRequireDefault(_limeJs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/* istanbul ignore next */
	var Application = function Application() {
	    _classCallCheck(this, Application);
	
	    // Default values
	    this.identifier = _limeJs2.default.Guid();
	    this.compression = _limeJs2.default.SessionCompression.NONE;
	    this.encryption = _limeJs2.default.SessionEncryption.NONE;
	    this.instance = 'default';
	    this.domain = 'msging.net';
	    this.scheme = 'wss';
	    this.hostName = 'ws.msging.net';
	    this.port = 443;
	    this.presence = {
	        status: 'available',
	        routingRule: 'identity'
	    };
	    this.notifyConsumed = true;
	    this.authentication = new _limeJs2.default.GuestAuthentication();
	    this.commandTimeout = 6000;
	};
	
	exports.default = Application;
	module.exports = exports['default'];

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _UriTemplates = __webpack_require__(6);
	
	var UriTemplates = _interopRequireWildcard(_UriTemplates);
	
	var _ContentTypes = __webpack_require__(7);
	
	var ContentTypes = _interopRequireWildcard(_ContentTypes);
	
	var _limeJs = __webpack_require__(2);
	
	var Lime = _interopRequireWildcard(_limeJs);
	
	var _ExtensionBase2 = __webpack_require__(8);
	
	var _ExtensionBase3 = _interopRequireDefault(_ExtensionBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var POSTMASTER_AI = 'postmaster@ai';
	
	var ArtificialIntelligenceExtension = function (_ExtensionBase) {
	    _inherits(ArtificialIntelligenceExtension, _ExtensionBase);
	
	    function ArtificialIntelligenceExtension(client, domain) {
	        _classCallCheck(this, ArtificialIntelligenceExtension);
	
	        return _possibleConstructorReturn(this, (ArtificialIntelligenceExtension.__proto__ || Object.getPrototypeOf(ArtificialIntelligenceExtension)).call(this, client, POSTMASTER_AI + '.' + domain));
	    }
	
	    // Analysis
	
	    _createClass(ArtificialIntelligenceExtension, [{
	        key: 'getAnalysis',
	        value: function getAnalysis() {
	            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	            var _ref$skip = _ref.skip,
	                skip = _ref$skip === undefined ? 0 : _ref$skip,
	                _ref$take = _ref.take,
	                take = _ref$take === undefined ? 100 : _ref$take,
	                _ref$ascending = _ref.ascending,
	                ascending = _ref$ascending === undefined ? false : _ref$ascending,
	                _ref$filter = _ref.filter,
	                filter = _ref$filter === undefined ? '' : _ref$filter,
	                _ref$intents = _ref.intents,
	                intents = _ref$intents === undefined ? [] : _ref$intents,
	                _ref$feedbacks = _ref.feedbacks,
	                feedbacks = _ref$feedbacks === undefined ? [] : _ref$feedbacks,
	                _ref$source = _ref.source,
	                source = _ref$source === undefined ? '' : _ref$source,
	                _ref$beginDate = _ref.beginDate,
	                beginDate = _ref$beginDate === undefined ? '' : _ref$beginDate,
	                _ref$endDate = _ref.endDate,
	                endDate = _ref$endDate === undefined ? '' : _ref$endDate,
	                _ref$minScore = _ref.minScore,
	                minScore = _ref$minScore === undefined ? '' : _ref$minScore,
	                _ref$maxScore = _ref.maxScore,
	                maxScore = _ref$maxScore === undefined ? '' : _ref$maxScore,
	                otherParams = _objectWithoutProperties(_ref, ['skip', 'take', 'ascending', 'filter', 'intents', 'feedbacks', 'source', 'beginDate', 'endDate', 'minScore', 'maxScore']);
	
	            if (arguments.length > 1 && _typeof(arguments[0]) !== 'object') {
	                throw new Error('You are using the deprecated signature of \'%s\', which does not exists anymore!', ArtificialIntelligenceExtension.name + '.getAnalysis');
	            }
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.ANALYSIS, _extends({
	                $skip: skip,
	                $take: take,
	                $ascending: ascending,
	                $filter: filter,
	                intents: intents,
	                feedbacks: feedbacks,
	                source: source,
	                beginDate: beginDate,
	                endDate: endDate,
	                minScore: minScore,
	                maxScore: maxScore
	            }, otherParams))));
	        }
	    }, {
	        key: 'analyse',
	        value: function analyse(analysis) {
	            return this._processCommand(this._createSetCommand(UriTemplates.ANALYSIS, ContentTypes.ANALYSIS, analysis));
	        }
	    }, {
	        key: 'setAnalysisByEmail',
	        value: function setAnalysisByEmail(emailAndFilter) {
	            var intents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	            var feedbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	            var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	            var beginDate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
	            var endDate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
	            var minScore = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';
	            var maxScore = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';
	
	            return this._processCommand(this._createSetCommand(UriTemplates.ANALYSIS_EMAIL, ContentTypes.JSON_DOCUMENT, {
	                email: emailAndFilter.email,
	                filter: this._buildResourceQuery(UriTemplates.ANALYSIS, {
	                    $filter: emailAndFilter.filter,
	                    intents: intents,
	                    feedbacks: feedbacks,
	                    source: source,
	                    beginDate: beginDate,
	                    endDate: endDate,
	                    minScore: minScore,
	                    maxScore: maxScore
	                })
	            }));
	        }
	    }, {
	        key: 'setAnalysisFeedback',
	        value: function setAnalysisFeedback(id, analysisFeedback) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.ANALYSIS_FEEDBACK, id), ContentTypes.ANALYSIS_FEEDBACK, analysisFeedback));
	        }
	    }, {
	        key: 'setAnalysesFeedback',
	        value: function setAnalysesFeedback(analyses) {
	            return this._processCommand(this._createSetCommand(UriTemplates.ANALYSES_FEEDBACK, Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.ANALYSIS_FEEDBACK,
	                items: analyses
	            }));
	        }
	
	        // Analytics (Confusion Matrix)
	
	    }, {
	        key: 'getAnalytics',
	        value: function getAnalytics() {
	            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	            var uri = id ? this._buildUri(UriTemplates.ANALYTICS_ID, id) : UriTemplates.ANALYTICS;
	            return this._processCommand(this._createGetCommand(uri));
	        }
	    }, {
	        key: 'setAnalytics',
	        value: function setAnalytics(confusionMatrix) {
	            return this._processCommand(this._createSetCommand(UriTemplates.ANALYTICS, ContentTypes.CONFUSION_MATRIX, confusionMatrix));
	        }
	    }, {
	        key: 'deleteAnalytics',
	        value: function deleteAnalytics(id) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.ANALYTICS_ID, id)));
	        }
	
	        // Intents
	
	    }, {
	        key: 'getIntent',
	        value: function getIntent(id) {
	            var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(this._buildUri(UriTemplates.INTENTION, id), {
	                deep: deep
	            })));
	        }
	    }, {
	        key: 'getIntents',
	        value: function getIntents() {
	            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	            var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	            var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	            var ascending = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.INTENTIONS, {
	                $skip: skip,
	                $take: take,
	                deep: deep,
	                name: name,
	                $ascending: ascending
	            })));
	        }
	    }, {
	        key: 'setIntent',
	        value: function setIntent(intent) {
	            return this._processCommand(this._createSetCommand(UriTemplates.INTENTIONS, ContentTypes.INTENTION, intent));
	        }
	    }, {
	        key: 'setIntents',
	        value: function setIntents(intents) {
	            return this._processCommand(this._createSetCommand(UriTemplates.INTENTIONS, Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.INTENTION,
	                items: intents
	            }));
	        }
	    }, {
	        key: 'mergeIntent',
	        value: function mergeIntent(intent) {
	            return this._processCommand(this._createMergeCommand(UriTemplates.INTENTIONS, ContentTypes.INTENTION, intent));
	        }
	    }, {
	        key: 'mergeIntents',
	        value: function mergeIntents(intents) {
	            return this._processCommand(this._createMergeCommand(UriTemplates.INTENTIONS, Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.INTENTION,
	                items: intents
	            }));
	        }
	    }, {
	        key: 'deleteIntent',
	        value: function deleteIntent(id) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.INTENTION, id)));
	        }
	    }, {
	        key: 'deleteIntents',
	        value: function deleteIntents() {
	            return this._processCommand(this._createDeleteCommand(UriTemplates.INTENTIONS));
	        }
	
	        // Intents Answers
	
	    }, {
	        key: 'getIntentAnswers',
	        value: function getIntentAnswers(id) {
	            var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	            var take = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
	            var ascending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(this._buildUri(UriTemplates.INTENTION_ANSWERS, id), {
	                $skip: skip,
	                $take: take,
	                $ascending: ascending
	            })));
	        }
	    }, {
	        key: 'setIntentAnswers',
	        value: function setIntentAnswers(id, answers) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.INTENTION_ANSWERS, id), Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.ANSWER,
	                items: answers
	            }));
	        }
	    }, {
	        key: 'deleteIntentAnswer',
	        value: function deleteIntentAnswer(id, answerId) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.INTENTION_ANSWER, id, answerId)));
	        }
	
	        // Intents Questions
	
	    }, {
	        key: 'getIntentQuestions',
	        value: function getIntentQuestions(id) {
	            return this._processCommand(this._createGetCommand(this._buildUri(UriTemplates.INTENTION_QUESTIONS, id)));
	        }
	    }, {
	        key: 'setIntentQuestions',
	        value: function setIntentQuestions(id, questions) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.INTENTION_QUESTIONS, id), Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.QUESTION,
	                items: questions
	            }));
	        }
	    }, {
	        key: 'deleteIntentQuestion',
	        value: function deleteIntentQuestion(id, questionId) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.INTENTION_QUESTION, id, questionId)));
	        }
	
	        // Entity
	
	    }, {
	        key: 'getEntity',
	        value: function getEntity(id) {
	            return this._processCommand(this._createGetCommand(this._buildUri(UriTemplates.ENTITY, id)));
	        }
	    }, {
	        key: 'getEntities',
	        value: function getEntities() {
	            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	            var ascending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	            var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.ENTITIES, {
	                $skip: skip,
	                $take: take,
	                $ascending: ascending,
	                name: name
	            })));
	        }
	    }, {
	        key: 'setEntity',
	        value: function setEntity(entity) {
	            return this._processCommand(this._createSetCommand(UriTemplates.ENTITIES, ContentTypes.ENTITY, entity));
	        }
	    }, {
	        key: 'deleteEntity',
	        value: function deleteEntity(id) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.ENTITY, id)));
	        }
	    }, {
	        key: 'deleteEntities',
	        value: function deleteEntities() {
	            return this._processCommand(this._createDeleteCommand(UriTemplates.ENTITIES));
	        }
	
	        // Model
	
	    }, {
	        key: 'getModels',
	        value: function getModels() {
	            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	            var ascending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.MODELS, {
	                $skip: skip,
	                $take: take,
	                $ascending: ascending
	            })));
	        }
	    }, {
	        key: 'getModel',
	        value: function getModel(id) {
	            return this._processCommand(this._createGetCommand(this._buildUri(UriTemplates.MODEL, id)));
	        }
	    }, {
	        key: 'getModelSummary',
	        value: function getModelSummary() {
	            return this._processCommand(this._createGetCommand(UriTemplates.MODELS_SUMMARY));
	        }
	    }, {
	        key: 'getLastTrainedOrPublishedModel',
	        value: function getLastTrainedOrPublishedModel() {
	            return this._processCommand(this._createGetCommand(UriTemplates.LAST_TRAINED_OR_PUBLISH_MODEL));
	        }
	    }, {
	        key: 'trainModel',
	        value: function trainModel() {
	            return this._processCommand(this._createSetCommand(UriTemplates.MODELS, ContentTypes.MODEL_TRAINING, {}));
	        }
	    }, {
	        key: 'publishModel',
	        value: function publishModel(id) {
	            return this._processCommand(this._createSetCommand(UriTemplates.MODELS, ContentTypes.MODEL_PUBLISHING, {
	                id: id
	            }));
	        }
	
	        // Word Set
	
	    }, {
	        key: 'getWordSet',
	        value: function getWordSet(id) {
	            var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(this._buildUri(UriTemplates.WORD_SET, id), {
	                deep: deep
	            })));
	        }
	    }, {
	        key: 'getWordSets',
	        value: function getWordSets() {
	            var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.WORD_SETS, {
	                deep: deep
	            })));
	        }
	    }, {
	        key: 'setWordSetResource',
	        value: function setWordSetResource(id, resource) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.WORD_SET, id), Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.WORD_SET_WORD,
	                items: resource
	            }));
	        }
	    }, {
	        key: 'setWordSet',
	        value: function setWordSet(wordSet) {
	            return this._processCommand(this._createSetCommand(UriTemplates.WORD_SETS, ContentTypes.WORD_SET, wordSet));
	        }
	    }, {
	        key: 'deleteWordSet',
	        value: function deleteWordSet(id) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.WORD_SET, id)));
	        }
	    }, {
	        key: 'analyseWordSet',
	        value: function analyseWordSet(analysis) {
	            return this._processCommand(this._createSetCommand(UriTemplates.WORD_SETS_ANALYSIS, ContentTypes.WORD_SETS_ANALYSIS, analysis));
	        }
	
	        //Content Assistant
	
	    }, {
	        key: 'analyseContent',
	        value: function analyseContent(analysis) {
	            return this._processCommand(this._createSetCommand(UriTemplates.CONTENT_ANALYSIS, ContentTypes.ANALYSIS, analysis));
	        }
	    }, {
	        key: 'matchContent',
	        value: function matchContent(combination) {
	            return this._processCommand(this._createSetCommand(UriTemplates.CONTENT_ANALYSIS, ContentTypes.CONTENT_COMBINATION, combination));
	        }
	    }, {
	        key: 'getContents',
	        value: function getContents() {
	            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	            var ascending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	            var intents = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
	            var entities = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	            var text = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
	            var beginDate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';
	            var endDate = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.CONTENT, {
	                $skip: skip,
	                $take: take,
	                $ascending: ascending,
	                intents: intents,
	                entities: entities,
	                text: text,
	                beginDate: beginDate,
	                endDate: endDate
	            })));
	        }
	    }, {
	        key: 'getContent',
	        value: function getContent(id) {
	            return this._processCommand(this._createGetCommand(this._buildUri(UriTemplates.CONTENT_ID, id)));
	        }
	    }, {
	        key: 'setContent',
	        value: function setContent(content) {
	            return this._processCommand(this._createSetCommand(UriTemplates.CONTENT, ContentTypes.CONTENT_RESULT, content));
	        }
	    }, {
	        key: 'setContentResult',
	        value: function setContentResult(id, content) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.CONTENT_ID, id), ContentTypes.CONTENT_RESULT, content));
	        }
	    }, {
	        key: 'setContentCombination',
	        value: function setContentCombination(id, combination) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.CONTENT_ID, id), ContentTypes.CONTENT_COMBINATION, combination));
	        }
	    }, {
	        key: 'setContentCombinations',
	        value: function setContentCombinations(id, combinations) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.CONTENT_ID, id), Lime.ContentTypes.COLLECTION, {
	                itemType: ContentTypes.CONTENT_COMBINATION,
	                items: combinations
	            }));
	        }
	    }, {
	        key: 'deleteContent',
	        value: function deleteContent(id) {
	            return this._processCommand(this._createDeleteCommand(this._buildUri(UriTemplates.CONTENT_ID, id)));
	        }
	    }]);
	
	    return ArtificialIntelligenceExtension;
	}(_ExtensionBase3.default);
	
	exports.default = ArtificialIntelligenceExtension;
	module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var ANALYSIS = exports.ANALYSIS = '/analysis';
	
	var ANALYSIS_FEEDBACK = exports.ANALYSIS_FEEDBACK = '/analysis/{0}/feedback';
	
	var ANALYSES_FEEDBACK = exports.ANALYSES_FEEDBACK = '/analysis/feedback';
	
	var ANALYSIS_EMAIL = exports.ANALYSIS_EMAIL = '/enhancement/send-by-email';
	
	var ANALYTICS = exports.ANALYTICS = '/analytics/confusion-matrix';
	
	var ANALYTICS_ID = exports.ANALYTICS_ID = '/analytics/confusion-matrix/{0}';
	
	var INTENTIONS = exports.INTENTIONS = '/intentions';
	
	var INTENTION = exports.INTENTION = '/intentions/{0}';
	
	var INTENTION_ANSWERS = exports.INTENTION_ANSWERS = '/intentions/{0}/answers';
	
	var INTENTION_ANSWER = exports.INTENTION_ANSWER = '/intentions/{0}/answers/{1}';
	
	var INTENTION_QUESTIONS = exports.INTENTION_QUESTIONS = '/intentions/{0}/questions';
	
	var INTENTION_QUESTION = exports.INTENTION_QUESTION = '/intentions/{0}/questions/{1}';
	
	var ENTITY = exports.ENTITY = '/entities/{0}';
	
	var ENTITIES = exports.ENTITIES = '/entities';
	
	var MODELS = exports.MODELS = '/models';
	
	var MODEL = exports.MODEL = '/model/{0}';
	
	var MODELS_SUMMARY = exports.MODELS_SUMMARY = '/models/summary';
	
	var LAST_TRAINED_OR_PUBLISH_MODEL = exports.LAST_TRAINED_OR_PUBLISH_MODEL = '/models/last-trained-or-published';
	
	var WORD_SETS = exports.WORD_SETS = '/word-sets';
	
	var WORD_SET = exports.WORD_SET = '/word-sets/{0}';
	
	var WORD_SETS_ANALYSIS = exports.WORD_SETS_ANALYSIS = '/word-sets-analysis ';
	
	var CONTENT = exports.CONTENT = '/content';
	
	var CONTENT_ID = exports.CONTENT_ID = '/content/{0}';
	
	var CONTENT_ANALYSIS = exports.CONTENT_ANALYSIS = '/content/analysis';

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var ANALYSIS = exports.ANALYSIS = 'application/vnd.iris.ai.analysis-request+json';
	
	var ANALYSIS_FEEDBACK = exports.ANALYSIS_FEEDBACK = 'application/vnd.iris.ai.analysis-feedback+json';
	
	var ANSWER = exports.ANSWER = 'application/vnd.iris.ai.answer+json';
	
	var CONFUSION_MATRIX = exports.CONFUSION_MATRIX = 'application/vnd.iris.ai.confusion-matrix+json';
	
	var CONTENT_RESULT = exports.CONTENT_RESULT = 'application/vnd.iris.ai.content-result+json';
	
	var CONTENT_COMBINATION = exports.CONTENT_COMBINATION = 'application/vnd.iris.ai.content-combination+json';
	
	var ENTITY = exports.ENTITY = 'application/vnd.iris.ai.entity+json';
	
	var INTENTION = exports.INTENTION = 'application/vnd.iris.ai.intention+json';
	
	var JSON_DOCUMENT = exports.JSON_DOCUMENT = 'application/json';
	
	var MODEL_PUBLISHING = exports.MODEL_PUBLISHING = 'application/vnd.iris.ai.model-publishing+json';
	
	var MODEL_TRAINING = exports.MODEL_TRAINING = 'application/vnd.iris.ai.model-training+json';
	
	var QUESTION = exports.QUESTION = 'application/vnd.iris.ai.question+json';
	
	var WORD_SET = exports.WORD_SET = 'application/vnd.iris.ai.word-set+json';
	
	var WORD_SET_ANALYSIS = exports.WORD_SET_ANALYSIS = 'application/vnd.iris.ai.word-set-analysis+json';
	
	var WORD_SET_WORD = exports.WORD_SET_WORD = 'application/vnd.iris.ai.word+json';

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _limeJs = __webpack_require__(2);
	
	var _limeJs2 = _interopRequireDefault(_limeJs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ExtensionBase = function () {
	    function ExtensionBase(client) {
	        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	        _classCallCheck(this, ExtensionBase);
	
	        this._client = client;
	        this._to = to;
	    }
	
	    _createClass(ExtensionBase, [{
	        key: '_createGetCommand',
	        value: function _createGetCommand(uri) {
	            var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            var command = {
	                id: id ? id : _limeJs2.default.Guid(),
	                method: 'get',
	                uri: uri
	            };
	
	            if (this._to) {
	                command.to = this._to;
	            }
	
	            return command;
	        }
	    }, {
	        key: '_createSetCommand',
	        value: function _createSetCommand(uri, type, resource) {
	            var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	            var command = {
	                id: id ? id : _limeJs2.default.Guid(),
	                method: 'set',
	                uri: uri,
	                resource: resource
	            };
	
	            if (type) {
	                command.type = type;
	            }
	
	            if (this._to) {
	                command.to = this._to;
	            }
	
	            return command;
	        }
	    }, {
	        key: '_createMergeCommand',
	        value: function _createMergeCommand(uri, type, resource) {
	            var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	            var command = {
	                id: id ? id : _limeJs2.default.Guid(),
	                method: 'merge',
	                uri: uri,
	                type: type,
	                resource: resource
	            };
	
	            if (this._to) {
	                command.to = this._to;
	            }
	
	            return command;
	        }
	    }, {
	        key: '_createDeleteCommand',
	        value: function _createDeleteCommand(uri) {
	            var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            var command = {
	                id: id ? id : _limeJs2.default.Guid(),
	                method: 'delete',
	                uri: uri
	            };
	
	            if (this._to) {
	                command.to = this._to;
	            }
	
	            return command;
	        }
	    }, {
	        key: '_processCommand',
	        value: function _processCommand(command) {
	            command = _extends({}, command, {
	                id: command.id ? command.id : _limeJs2.default.Guid()
	            });
	
	            return this._client.sendCommand(command).then(function (response) {
	
	                if (!response) {
	                    return;
	                }
	
	                if (response.itemType && response.items) {
	                    return response.items;
	                }
	
	                return response;
	            });
	        }
	    }, {
	        key: '_buildResourceQuery',
	        value: function _buildResourceQuery(uri, query) {
	            var i = 0;
	            var options = '';
	
	            Object.keys(query).forEach(function (key) {
	                var value = query[key].toString();
	                if (value) {
	                    options += i === 0 ? '?' : '&';
	
	                    if (Array.isArray(value)) {
	                        value = value.concat(',');
	                    }
	
	                    options += key + '=' + value;
	                    i += 1;
	                }
	            });
	
	            return '' + uri + encodeURI(options);
	        }
	    }, {
	        key: '_buildUri',
	        value: function _buildUri(uri) {
	            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                args[_key - 1] = arguments[_key];
	            }
	
	            args.forEach(function (arg, i) {
	                uri = uri.replace('{' + i + '}', encodeURIComponent(arg));
	            });
	
	            return uri;
	        }
	    }]);
	
	    return ExtensionBase;
	}();
	
	exports.default = ExtensionBase;
	module.exports = exports['default'];

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _UriTemplates = __webpack_require__(10);
	
	var UriTemplates = _interopRequireWildcard(_UriTemplates);
	
	var _ExtensionBase2 = __webpack_require__(8);
	
	var _ExtensionBase3 = _interopRequireDefault(_ExtensionBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var POSTMASTER_MEDIA = 'postmaster@media';
	
	var MediaExtension = function (_ExtensionBase) {
	    _inherits(MediaExtension, _ExtensionBase);
	
	    function MediaExtension(client, domain) {
	        _classCallCheck(this, MediaExtension);
	
	        return _possibleConstructorReturn(this, (MediaExtension.__proto__ || Object.getPrototypeOf(MediaExtension)).call(this, client, POSTMASTER_MEDIA + '.' + domain));
	    }
	
	    _createClass(MediaExtension, [{
	        key: 'getUploadToken',
	        value: function getUploadToken() {
	            var secure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.MEDIA_UPLOAD, {
	                secure: secure
	            })));
	        }
	    }, {
	        key: 'refreshMedia',
	        value: function refreshMedia(id) {
	            return this._processCommand(this._createGetCommand(this._buildUri(UriTemplates.REFRESH_MEDIA, id)));
	        }
	    }]);
	
	    return MediaExtension;
	}(_ExtensionBase3.default);
	
	exports.default = MediaExtension;
	module.exports = exports['default'];

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var MEDIA_UPLOAD = exports.MEDIA_UPLOAD = '/upload-media-uri';
	
	var REFRESH_MEDIA = exports.REFRESH_MEDIA = '/refresh-media-uri/{0}';

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _UriTemplates = __webpack_require__(12);
	
	var UriTemplates = _interopRequireWildcard(_UriTemplates);
	
	var _ContentTypes = __webpack_require__(13);
	
	var ContentTypes = _interopRequireWildcard(_ContentTypes);
	
	var _ExtensionBase2 = __webpack_require__(8);
	
	var _ExtensionBase3 = _interopRequireDefault(_ExtensionBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ChatExtension = function (_ExtensionBase) {
	    _inherits(ChatExtension, _ExtensionBase);
	
	    function ChatExtension(client) {
	        _classCallCheck(this, ChatExtension);
	
	        return _possibleConstructorReturn(this, (ChatExtension.__proto__ || Object.getPrototypeOf(ChatExtension)).call(this, client, null));
	    }
	
	    _createClass(ChatExtension, [{
	        key: 'getThreads',
	        value: function getThreads() {
	            var take = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
	            var messageDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(UriTemplates.THREADS, {
	                $take: take,
	                messageDate: messageDate
	            })));
	        }
	    }, {
	        key: 'getThread',
	        value: function getThread() {
	            var identity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	            var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	            var messageId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	            var storageDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	            var direction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
	            var decryptContent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
	            var refreshExpiredMedia = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
	            var after = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';
	
	            return this._processCommand(this._createGetCommand(this._buildResourceQuery(this._buildUri(UriTemplates.THREAD, identity), {
	                $take: take,
	                after: after,
	                messageId: messageId,
	                storageDate: storageDate,
	                direction: direction,
	                decryptContent: decryptContent,
	                refreshExpiredMedia: refreshExpiredMedia
	            })));
	        }
	    }, {
	        key: 'getThreadUnreadMessages',
	        value: function getThreadUnreadMessages(identity) {
	            return this._processCommand(this._createGetCommand(this._buildUri(UriTemplates.THREAD_UNREAD_MESSAGES, identity)));
	        }
	    }, {
	        key: 'setThread',
	        value: function setThread(identity, thread) {
	            return this._processCommand(this._createSetCommand(this._buildUri(UriTemplates.THREAD, identity), ContentTypes.THREAD_MESSAGE, thread));
	        }
	    }]);
	
	    return ChatExtension;
	}(_ExtensionBase3.default);
	
	exports.default = ChatExtension;
	module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var THREADS = exports.THREADS = '/threads';
	
	var THREAD = exports.THREAD = '/threads/{0}';
	
	var THREAD_UNREAD_MESSAGES = exports.THREAD_UNREAD_MESSAGES = '/threads/{0}/unread';

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var THREAD_MESSAGE = exports.THREAD_MESSAGE = 'application/vnd.iris.thread-message+json';

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _limeJs = __webpack_require__(2);
	
	var _limeJs2 = _interopRequireDefault(_limeJs);
	
	var _Client = __webpack_require__(1);
	
	var _Client2 = _interopRequireDefault(_Client);
	
	var _Application = __webpack_require__(3);
	
	var _Application2 = _interopRequireDefault(_Application);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/* istanbul ignore next */
	var ClientBuilder = function () {
	    function ClientBuilder() {
	        _classCallCheck(this, ClientBuilder);
	
	        this._application = new _Application2.default();
	    }
	
	    _createClass(ClientBuilder, [{
	        key: 'withApplication',
	        value: function withApplication(application) {
	            this._application = application;
	            return this;
	        }
	    }, {
	        key: 'withIdentifier',
	        value: function withIdentifier(identifier) {
	            this._application.identifier = identifier;
	            return this;
	        }
	    }, {
	        key: 'withInstance',
	        value: function withInstance(instance) {
	            this._application.instance = instance;
	            return this;
	        }
	
	        // withDomain :: String -> ClientBuilder
	
	    }, {
	        key: 'withDomain',
	        value: function withDomain(domain) {
	            this._application.domain = domain;
	            return this;
	        }
	
	        // withScheme :: String -> ClientBuilder
	
	    }, {
	        key: 'withScheme',
	        value: function withScheme(scheme) {
	            this._application.scheme = scheme;
	            return this;
	        }
	
	        // withHostName :: String -> ClientBuilder
	
	    }, {
	        key: 'withHostName',
	        value: function withHostName(hostName) {
	            this._application.hostName = hostName;
	            return this;
	        }
	    }, {
	        key: 'withPort',
	        value: function withPort(port) {
	            this._application.port = port;
	            return this;
	        }
	    }, {
	        key: 'withAccessKey',
	        value: function withAccessKey(accessKey) {
	            this._application.authentication = new _limeJs2.default.KeyAuthentication();
	            this._application.authentication.key = accessKey;
	            return this;
	        }
	    }, {
	        key: 'withPassword',
	        value: function withPassword(password) {
	            this._application.authentication = new _limeJs2.default.PlainAuthentication();
	            this._application.authentication.password = password;
	            return this;
	        }
	    }, {
	        key: 'withToken',
	        value: function withToken(token) {
	            this._application.authentication = new _limeJs2.default.ExternalAuthentication();
	            this._application.authentication.token = token;
	            return this;
	        }
	    }, {
	        key: 'withIssuer',
	        value: function withIssuer(issuer) {
	            if (!this._application.authentication) {
	                this._application.authentication = new _limeJs2.default.ExternalAuthentication();
	            }
	            this._application.authentication.issuer = issuer;
	            return this;
	        }
	
	        // withCompression :: Lime.SessionCompression.NONE -> ClientBuilder
	
	    }, {
	        key: 'withCompression',
	        value: function withCompression(compression) {
	            this._application.compression = compression;
	            return this;
	        }
	
	        // withEncryption :: Lime.SessionEncryption.NONE -> ClientBuilder
	
	    }, {
	        key: 'withEncryption',
	        value: function withEncryption(encryption) {
	            this._application.encryption = encryption;
	            return this;
	        }
	    }, {
	        key: 'withRoutingRule',
	        value: function withRoutingRule(routingRule) {
	            this._application.presence.routingRule = routingRule;
	            return this;
	        }
	    }, {
	        key: 'withEcho',
	        value: function withEcho(echo) {
	            this._application.presence.echo = echo;
	            return this;
	        }
	    }, {
	        key: 'withPriority',
	        value: function withPriority(priority) {
	            this._application.presence.priority = priority;
	            return this;
	        }
	    }, {
	        key: 'withRoundRobin',
	        value: function withRoundRobin(roundRobin) {
	            this._application.presence.roundRobin = roundRobin;
	            return this;
	        }
	    }, {
	        key: 'withNotifyConsumed',
	        value: function withNotifyConsumed(notifyConsumed) {
	            this._application.notifyConsumed = notifyConsumed;
	            return this;
	        }
	    }, {
	        key: 'withTransportFactory',
	        value: function withTransportFactory(transportFactory) {
	            this._transportFactory = transportFactory;
	            return this;
	        }
	    }, {
	        key: 'withCommandTimeout',
	        value: function withCommandTimeout(timeoutInMilliSecs) {
	            this._application.commandTimeout = timeoutInMilliSecs;
	            return this;
	        }
	    }, {
	        key: 'build',
	        value: function build() {
	            var uri = this._application.scheme + '://' + this._application.hostName + ':' + this._application.port;
	            return new _Client2.default(uri, this._transportFactory, this._application);
	        }
	    }]);
	
	    return ClientBuilder;
	}();
	
	exports.default = ClientBuilder;
	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _ArtificialIntelligence = __webpack_require__(5);
	
	var _ArtificialIntelligence2 = _interopRequireDefault(_ArtificialIntelligence);
	
	var _Media = __webpack_require__(9);
	
	var _Media2 = _interopRequireDefault(_Media);
	
	var _Chat = __webpack_require__(11);
	
	var _Chat2 = _interopRequireDefault(_Chat);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    ArtificialIntelligence: _ArtificialIntelligence2.default,
	    Media: _Media2.default,
	    Chat: _Chat2.default
	};
	module.exports = exports['default'];

/***/ })
/******/ ])
});
;
//# sourceMappingURL=blip-sdk.js.map